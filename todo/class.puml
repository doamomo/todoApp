@startuml
class ViewModel {
  .. Column / Project ..
  {field} +displayColumn : ko.observable(Boolean)
  +columns : Column[]
  {field} +projects : ko.observableArray(Project)
  {field} +selectedColumn : ko.observable(AbstractColumn)
  {field} +renameProject : ko.observable(Project)
  .. Task ..
  {field} +incompleteTasks : ko.observableArray(Task)
  {field} +completedTasks : ko.observableArray(Task)
  {field} +openCompleteTaskFlag : ko.observable(Number)
  .. Environment ..
  {field} +isMobile : ko.observable(Boolean)
  .. User Setting ..
  {field} +displaySettings : ko.observable(Boolean)
  {field} +displaySettingsIcon : ko.observable(Boolean)
  {field} +imageFileMaxSize : ko.observable(String)
  {field} +backgroundImageHash : ko.observable(String)
  +availableFontFamilies : FontFamily[]
  {field} +selectedFontFamily : ko.observable(String)
}

class AbstractColumn {
  {field} +name : ko.observable(String)
  {field} +color : ko.observable(String)
  +icon : String
  +get projectId() : Number
  +get completetionDateRangeStart() : String
  +get completetionDateRangeEnd() : String
  +get taskStatus() : Number
}

class Project {
  +id : Number
  +get projectId() : Number
}

class Column {
  -completetionDateRangeStart : Number
  -completetionDateRangeEnd : Number
  -taskStatus : Number
  {field} +countIncompleteTasks : ko.observable(Number)
  +daysLaterToDateStr(daysLater) : String
  +get completetionDateRangeStart() : String
  +get completetionDateRangeEnd() : String
  +get taskStatus() : Number
}

class Task {
  +id : Number
  +project : Project
  +value : String
  +completetionDate : String
  +status : Number
  +get isCompleted() : Boolean
  +get isExpired() : Boolean
}

class HeadViewModel {
  {field} +fontFamilyHref : ko.computed(String)
}

class FontFamily {
  +name : String
  +fontFamily : String
}

AbstractColumn <|-- Column
AbstractColumn <|-- Project
ViewModel o-- Column
ViewModel o-- Project
ViewModel o-- Task
ViewModel o-- FontFamily
@enduml
